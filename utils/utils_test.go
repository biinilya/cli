package utils_test

import (
	"sort"
	"strings"
	"testing"

	"github.com/c-robinson/iplib"
	"github.com/forestvpn/cli/utils"
)

func TestExcludeDisallowedIpdsResult(t *testing.T) {
	allowed := strings.Split("10.0.0.0/8, 172.0.0.0/8, 192.0.0.0/8", ", ")
	disallowed := strings.Split("10.100.0.0/16, 10.0.1.0/24, 10.10.10.10/32, 172.182.0.0/16, 172.16.1.0/24, 172.200.16.165/32, 192.215.0.0/16, 192.168.1.0/24, 192.100.200.14/32", ", ")
	expectedResult := strings.Split("10.0.0.0/24, 10.0.2.0/23, 10.0.4.0/22, 10.0.8.0/21, 10.0.16.0/20, 10.0.32.0/19, 10.0.64.0/18, 10.0.128.0/17, 10.1.0.0/16, 10.2.0.0/15, 10.4.0.0/14, 10.8.0.0/15, 10.10.0.0/21, 10.10.8.0/23, 10.10.10.0/29, 10.10.10.8/31, 10.10.10.11/32, 10.10.10.12/30, 10.10.10.16/28, 10.10.10.32/27, 10.10.10.64/26, 10.10.10.128/25, 10.10.11.0/24, 10.10.12.0/22, 10.10.16.0/20, 10.10.32.0/19, 10.10.64.0/18, 10.10.128.0/17, 10.11.0.0/16, 10.12.0.0/14, 10.16.0.0/12, 10.32.0.0/11, 10.64.0.0/11, 10.96.0.0/14, 10.101.0.0/16, 10.102.0.0/15, 10.104.0.0/13, 10.112.0.0/12, 10.128.0.0/9, 172.0.0.0/12, 172.16.0.0/24, 172.16.2.0/23, 172.16.4.0/22, 172.16.8.0/21, 172.16.16.0/20, 172.16.32.0/19, 172.16.64.0/18, 172.16.128.0/17, 172.17.0.0/16, 172.18.0.0/15, 172.20.0.0/14, 172.24.0.0/13, 172.32.0.0/11, 172.64.0.0/10, 172.128.0.0/11, 172.160.0.0/12, 172.176.0.0/14, 172.180.0.0/15, 172.183.0.0/16, 172.184.0.0/13, 172.192.0.0/13, 172.200.0.0/20, 172.200.16.0/25, 172.200.16.128/27, 172.200.16.160/30, 172.200.16.164/32, 172.200.16.166/31, 172.200.16.168/29, 172.200.16.176/28, 172.200.16.192/26, 172.200.17.0/24, 172.200.18.0/23, 172.200.20.0/22, 172.200.24.0/21, 172.200.32.0/19, 172.200.64.0/18, 172.200.128.0/17, 172.201.0.0/16, 172.202.0.0/15, 172.204.0.0/14, 172.208.0.0/12, 172.224.0.0/11, 192.0.0.0/10, 192.64.0.0/11, 192.96.0.0/14, 192.100.0.0/17, 192.100.128.0/18, 192.100.192.0/21, 192.100.200.0/29, 192.100.200.8/30, 192.100.200.12/31, 192.100.200.15/32, 192.100.200.16/28, 192.100.200.32/27, 192.100.200.64/26, 192.100.200.128/25, 192.100.201.0/24, 192.100.202.0/23, 192.100.204.0/22, 192.100.208.0/20, 192.100.224.0/19, 192.101.0.0/16, 192.102.0.0/15, 192.104.0.0/13, 192.112.0.0/12, 192.128.0.0/11, 192.160.0.0/13, 192.168.0.0/24, 192.168.2.0/23, 192.168.4.0/22, 192.168.8.0/21, 192.168.16.0/20, 192.168.32.0/19, 192.168.64.0/18, 192.168.128.0/17, 192.169.0.0/16, 192.170.0.0/15, 192.172.0.0/14, 192.176.0.0/12, 192.192.0.0/12, 192.208.0.0/14, 192.212.0.0/15, 192.214.0.0/16, 192.216.0.0/13, 192.224.0.0/11", ", ")
	actualResult, err := utils.ExcludeDisallowedIpds(allowed, disallowed)

	if err != nil {
		t.Error(err)
	}

	sort.Strings(actualResult)
	sort.Strings(expectedResult)

	actual := strings.Join(actualResult, ",")
	expected := strings.Join(expectedResult, ",")

	if actual != expected {
		t.Errorf("%s != %s; want ==", actual, expected)
	}
}

func TestExcludeDisallowedIpdsExclude(t *testing.T) {
	allowed := strings.Split("10.0.0.0/8, 172.0.0.0/8, 192.0.0.0/8", ", ")
	disallowed := strings.Split("10.100.0.0/16, 10.0.1.0/24, 10.10.10.10/32, 172.182.0.0/16, 172.16.1.0/24, 172.200.16.165/32, 192.215.0.0/16, 192.168.1.0/24, 192.100.200.14/32", ", ")
	result, err := utils.ExcludeDisallowedIpds(allowed, disallowed)

	if err != nil {
		t.Error(err)
	}

	for _, n := range disallowed {
		disallowedv4net := iplib.Net4FromStr(n)

		if disallowedv4net.Count() == 1 {
			_, bits := disallowedv4net.Mask().Size()

			if bits < 32 {
				t.Errorf("error parsing ipv4 network: %s", disallowedv4net.String())
			}
		}

		for _, r := range result {
			resultingv4net := iplib.Net4FromStr(r)

			if resultingv4net.Count() == 1 {
				_, bits := disallowedv4net.Mask().Size()

				if bits < 32 {
					t.Errorf("error parsing ipv4 network: %s", resultingv4net.String())
				}
			}

			if resultingv4net.ContainsNet(disallowedv4net) {
				t.Errorf("%s contains %s", resultingv4net.String(), disallowedv4net.String())
			}

		}
	}
}
