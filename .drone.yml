---
kind: pipeline
type: docker
name: default

workspace:
  path: /drone/src

volumes:
  - name: cache
    temp: { }

environment:
  GOCACHE: /cache/go/build
  GOMODCACHE: /cache/go/download

steps:
  - name: deps
    image: golang:1.18.4
    volumes:
      - name: cache
        path: /cache
    commands:
      - apt update
      - apt install git -y
      - cd src
      - go get -t -d -v ./...
      - go build all
  - name: fetch
    image: docker:git
    commands:
      - git fetch --tags
  - name: test
    image: golang:1.18.4
    volumes:
      - name: cache
        path: /cache
    depends_on:
      - deps
    commands:
      - apt update
      - apt install build-essential -y
      - cd src
      - go test ./...
  - name: build-linux-arm64
    image: golang:1.18.4
    #chocolatey/choco:latest-linux
    environment:
      GITHUB_TOKEN:
        from_secret: GITHUB_TOKEN
      # GOPATH: /usr/local/go
      GOOS: linux
      GOARCH: arm64
    privileged: false
    volumes:
      - name: cache
        path: /cache
    commands:
      - cd src
      - go build -o ../fvpn
      # - apt update
      # - apt install wget git binutils -y
      # - wget -q https://go.dev/dl/go1.18.9.linux-amd64.tar.gz
      # - tar -xf go1.18.9.linux-amd64.tar.gz
      # - chown -R root:root ./go
      # - mv go /usr/local
      # - export PATH=$PATH:$GOPATH/bin
      # - export VERSION=${DRONE_TAG}
      # - go install github.com/goreleaser/goreleaser@latest
      # - cd ./src
      # - goreleaser build -f ../.goreleaser-stable.yaml
      # - cd ../ipkg/src
      # - ./build.sh
      # - cd ../../src
      # - goreleaser release --skip-validate --rm-dist -f ../.goreleaser-stable.yaml
    depends_on:
      - test
    when:
      ref:
        include:
          - refs/tags/v*.*.*
          - refs/tags/v*.*.*-post*
        exclude:
          - refs/tags/v*.*.*-beta*
  - name: build-ipkg-arm64
    image: debian
    depends_on:
      - build-linux-arm64
    commands:
      - apt update
      - apt install binutils tree -y
      - mkdir -p ipkg/fvpn/control
      - mkdir ipkg/fvpn/data
      - export CTRLF=ipkg/fvpn/control/control
      - "echo Package: fvpn > $CTRLF"
      - "echo Version: ${DRONE_TAG} >> $CTRLF"
      - "echo Architecture: arm64 >> $CTRLF"
      - "echo Maintainer: nikiforova693@gmail.com >> $CTRLF"
      - "echo Description: ForestVPN - Fast, secure, and modern VPN. >> $CTRLF"
      - "echo Priority: optional >> $CTRLF"
      - "echo Depends: wireguard >> $CTRLF"
      - echo 2.0 > ipkg/fvpn/debian-binary
      - export PREINST=ipkg/fvpn/control/preinst
      - echo "#!/bin/bash" > $PREINST
      - echo arch=`uname -m` > $PREINST
      - echo "if [ $arch -ne 'arm64' ]; then" >> $PREINST
      - echo "    echo ${arch} is not supported" >> $PREINST
      - echo "    exit 1" >> $PREINST
      - chmod +x $PREINST
      - export POSTINST=ipkg/fvpn/control/postinst
      - echo "#!/bin/bash" > $POSTINST
      - echo fvpn >> $POSTINST
      - echo "if [ $? -eq 0 ]; then" >> $POSTINST
      - echo "    echo Successfully installed" >> $POSTINST
      - echo else >> $POSTINST
      - echo "    echo Could not install >&2" >> $POSTINST
      - chmod +x ipkg/fvpn/control/postinst
      - export BIN_DIR=ipkg/fvpn/data/usr/local/bin/
      - mkdir -p $BIN_DIR
      - cp fvpn $BIN_DIR
      - pushd ipkg/fvpn/control/
      - tar --numeric-owner --group=0 --owner=0 -czf ../control.tar.gz ./*
      - popd
      - pushd ipkg/fvpn/data
      - tar --numeric-owner --group=0 --owner=0 -czf ../data.tar.gz ./*
      - popd
      - pushd ipkg/fvpn
      - tar --numeric-owner --group=0 --owner=0 -cf ../../fvpn-${DRONE_TAG}.arm64.ipk ./debian-binary ./data.tar.gz ./control.tar.gz 
      - popd
      - tree
      - rm fvpn
      - rm -rf ipkg
      - tree
  - name: beta-release
    image: golang:1.18.4-bullseye
    environment:
      GITHUB_TOKEN:
        from_secret: GITHUB_TOKEN
    privileged: false
    volumes:
      - name: cache
        path: /cache
    commands:
      - export VERSION=${DRONE_TAG}
      - apt update
      - apt install git binutils -y
      - go install github.com/goreleaser/goreleaser@latest
      - cd packages
      - build.sh
      - cd ../src
      - goreleaser release -f ../.goreleaser-beta.yaml
    depends_on:
      - test
    when:
      ref:
        - refs/tags/v*.*.*-beta*
trigger:
  event:
    - tag